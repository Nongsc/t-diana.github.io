<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nsc</title>
  
  <subtitle>天道酬勤</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.nscblog.top/"/>
  <updated>2020-06-01T09:11:49.326Z</updated>
  <id>http://www.nscblog.top/</id>
  
  <author>
    <name>侬仕超</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo+GitHub博客搭建</title>
    <link href="http://www.nscblog.top/2020/05/01/hexo-GitHub%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>http://www.nscblog.top/2020/05/01/hexo-GitHub%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</id>
    <published>2020-05-01T08:52:43.000Z</published>
    <updated>2020-06-01T09:11:49.326Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="hexo-GitHub博客搭建"   >          <a href="#hexo-GitHub博客搭建" class="heading-link"><i class="fas fa-link"></i></a>hexo+GitHub博客搭建</h1>              <h2 id="引言"   >          <a href="#引言" class="heading-link"><i class="fas fa-link"></i></a>引言</h2>      <blockquote><p>我花了一些时间搭建属于自己的博客，曾经也弄过一些博客之类的，接触hexo之后，相对来说,hexo简单易用，灵活高效。</p><p>hexo+GitHub进行搭建相对自己购买服务器更为划算。花费的精力也比使用服务器要少很多。这样我们就可以更专注写博客。</p></blockquote><a id="more"></a>        <h2 id="环境搭建"   >          <a href="#环境搭建" class="heading-link"><i class="fas fa-link"></i></a>环境搭建</h2>      <p>首先我们要将博客托管于GitHub所以我们先安装Git，使用Git进行代码的上传于维护。</p>        <h2 id="Git安装"   >          <a href="#Git安装" class="heading-link"><i class="fas fa-link"></i></a>Git安装</h2>      <ol><li><p>从<span class="exturl"><a class="exturl__link"   href="https://git-scm.com/downloads"  target="_blank" rel="noopener">Git官网</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>上下载你计算机系统所对应的Git安装包</p></li><li><p>无脑下一步，进行安装</p></li><li><p>安装完成之后Win+R 输入cmd回车 输入 </p><figure class="highlight markdown"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></div></figure><p>出现版本号，代表环境变量配置成功。没有配置成功的话</p><figure class="highlight markdown"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">找到Git的安装路径</span><br><span class="line">将安装路径下的bin文件夹的路径添加到path变量中</span><br><span class="line"></span><br><span class="line">注意：bin文件夹存放是Git的一些二进制可执行命令。</span><br></pre></td></tr></table></div></figure></li><li><p>Git的一些基本操作和使用，我推荐<span class="exturl"><a class="exturl__link"   href="https://wiki.jikexueyuan.com/project/git-tutorial/github.html"  target="_blank" rel="noopener">极客学院的Git教程</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，写的很清楚，跟着学基本使用不成问题。</p></li></ol>        <h2 id="node-js安装"   >          <a href="#node-js安装" class="heading-link"><i class="fas fa-link"></i></a>node.js安装</h2>      <ol><li><p>从<span class="exturl"><a class="exturl__link"   href="https://nodejs.org/en/"  target="_blank" rel="noopener">nodejs官网</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>上下载你计算机系统所对应的nodejs安装包，我们直接使用长期支持办就行。不推荐使用最新版，否则在后续过程会出现百度都没有的问题。如：</p><blockquote><p>TypeError [ERR_INVALID_ARG_TYPE]: The “mode” argument must be integer.</p></blockquote></li></ol><ol start="2"><li><p>无脑下一步，直接完事。</p><p>再次进入cmd 执行以下命令</p><figure class="highlight markdown"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v  #查看nodejs的版本</span><br><span class="line">npm -v #这我也不知道是啥，查看有没有相关工具</span><br></pre></td></tr></table></div></figure></li></ol><blockquote><p>安装Git和nodejs之后，我们直接使用git bash来敲命令行</p></blockquote>        <h2 id="hexo安装"   >          <a href="#hexo安装" class="heading-link"><i class="fas fa-link"></i></a>hexo安装</h2>      <ol><li><p>先创建一个空文件夹blog，用于存放hexo的环境与博客文章，在blog文件内进行右单击后选择git bash here</p><p>输入命令</p><figure class="highlight markdown"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></div></figure><p>老规矩，使用hexo -v 查看是否安装成功，顺便查看版本号</p></li><li><p>接下来初始化hexo</p><figure class="highlight markdown"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></div></figure><p>初始化完成后会有以下文件结构：</p><ul><li>node_modules：依赖包 即hexo所需的环境依赖</li><li>public：生成的页面的存放位置</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：hexo主题样式</li><li>.gitignore：上传到git时所要忽略的东西</li><li>_config.yml：全局的配置文件</li></ul></li><li><p>输入命令</p><figure class="highlight markdown"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g #生成博客视图资源</span><br><span class="line">hexo s #启动后台服务器 会有http://localhost:4000</span><br></pre></td></tr></table></div></figure><p>在浏览器中输入：<span class="exturl"><a class="exturl__link"   href="http://localhost:4000"  target="_blank" rel="noopener">http://localhost:4000</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 进行测试查看</p><p>使用Ctrl+C将服务器关闭</p></li></ol>        <h2 id="创建GitHub个人仓库"   >          <a href="#创建GitHub个人仓库" class="heading-link"><i class="fas fa-link"></i></a>创建GitHub个人仓库</h2>      <ul><li>首先创建一个GitHub账号，记得用户名</li><li>创建一个仓库（repository）仓库名是 用户名.github.io 如我的仓库名就是 t-diana.github.io</li></ul>        <h2 id="将SSH添加到GitHub"   >          <a href="#将SSH添加到GitHub" class="heading-link"><i class="fas fa-link"></i></a>将SSH添加到GitHub</h2>      <ul><li><p>记录本台机器一些信息</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#这里的yourname输入你的GitHub用户名</span><br><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">#这里youremail输入你的GitHub的邮箱</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></div></figure></li><li><p>生成SSH公钥</p><figure class="highlight markdown"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C "youremail"</span><br></pre></td></tr></table></div></figure><p>可以在用户主目录里找到<code>.ssh</code>目录，里面有 id_rsa 和 id_rsa.pub 两个文件，这两个就是 SSH Key 的秘钥对，<code>id_rsa</code>是私钥，不能泄露出去，<code>id_rsa.pub</code>是公钥，可以放心地告诉任何人。</p></li><li><p>GitHub添加SSH </p><ol><li>登录GitHub</li><li>点击右上角头像，选择setting</li><li>选择SSH and GPG keys</li><li>点击 New SSH key</li><li>将id_rsa.pub里的内容全部复制到key中，取个title 点击Add SSH key</li></ol></li><li><p>在git bash 中查看是否添加成功</p><figure class="highlight markdown"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com   #直接复制，不用修改</span><br></pre></td></tr></table></div></figure></li></ul>        <h2 id="将hexo部署到GitHub"   >          <a href="#将hexo部署到GitHub" class="heading-link"><i class="fas fa-link"></i></a>将hexo部署到GitHub</h2>      <p>对全局配置文件_config.yml(而不是themes下的 _config.yml)进行修改</p><figure class="highlight yml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/YourgithubName/YourgithubName.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"><span class="comment">#YourgithubName 就是自己的GitHub用户名</span></span><br></pre></td></tr></table></div></figure><p>然后需要先安装deploy-git，才能用命令将博客视图资源部署到GitHub上</p><figure class="highlight markdown"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save #安装deploy-git的命令</span><br></pre></td></tr></table></div></figure><p>上传操作相关命令，每次写完文章后，执行相关的命令</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean #清除之前生成的博客视图资源</span><br><span class="line">hexo generate 或是 hexo g #生成静态文章</span><br><span class="line">hexo deploy 或是 hexo d #将资源上传到GitHub上</span><br></pre></td></tr></table></div></figure><blockquote><p>注意：</p><p>进行deploy时会需要输入username和password</p></blockquote><p>至此，博客基本搭建完成。如果需要进行其他修改的话。</p><p>大家可以查看<span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/sinat_37781304/article/details/82729029"  target="_blank" rel="noopener">这篇博客</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，这位博主写得非常细致。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;hexo-GitHub博客搭建&quot;   &gt;
          &lt;a href=&quot;#hexo-GitHub博客搭建&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;hexo+GitHub博客搭建&lt;/h1&gt;
      
        &lt;h2 id=&quot;引言&quot;   &gt;
          &lt;a href=&quot;#引言&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;引言&lt;/h2&gt;
      &lt;blockquote&gt;
&lt;p&gt;我花了一些时间搭建属于自己的博客，曾经也弄过一些博客之类的，接触hexo之后，相对来说,hexo简单易用，灵活高效。&lt;/p&gt;
&lt;p&gt;hexo+GitHub进行搭建相对自己购买服务器更为划算。花费的精力也比使用服务器要少很多。这样我们就可以更专注写博客。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="学习" scheme="http://www.nscblog.top/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="错误记录" scheme="http://www.nscblog.top/tags/%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>学习方法论</title>
    <link href="http://www.nscblog.top/2020/05/01/%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%E8%AE%BA/"/>
    <id>http://www.nscblog.top/2020/05/01/%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%E8%AE%BA/</id>
    <published>2020-05-01T08:26:36.000Z</published>
    <updated>2020-05-05T01:22:35.847Z</updated>
    
    <content type="html"><![CDATA[        <h2 id="关于学习"   >          <a href="#关于学习" class="heading-link"><i class="fas fa-link"></i></a>关于学习</h2>              <h3 id="世界观："   >          <a href="#世界观：" class="heading-link"><i class="fas fa-link"></i></a>世界观：</h3>      <p>​    不学习就不会产生进步，将会愚昧无知，自甘堕落。学习就是体验痛苦，重复同样的事物，却没有任何意思。我不喜欢学习，也不喜欢学习的成果，我想要的永远没有得到过。我只是在获取在这个世界的生存方式。</p><a id="more"></a>        <h3 id="方法论："   >          <a href="#方法论：" class="heading-link"><i class="fas fa-link"></i></a>方法论：</h3>              <h4 id="chapter1-拖延症"   >          <a href="#chapter1-拖延症" class="heading-link"><i class="fas fa-link"></i></a>chapter1 拖延症</h4>      <p>学习新事物的记忆区域与痛觉的区域再相同的地方（大脑），因而当你在学习新事物的，会加大堆脑部的压力。</p><p>要学会主动去做，天赋与才能的开始  (这是一种态度，也是很重要的思想)</p>        <h4 id="chapter2-记住学习的重要的东西，而不是重复学习"   >          <a href="#chapter2-记住学习的重要的东西，而不是重复学习" class="heading-link"><i class="fas fa-link"></i></a>chapter2 记住学习的重要的东西，而不是重复学习</h4>      <p>消耗时间回忆，不要持续学习新事物</p><p>​        大脑记忆新事物的重要性</p><p>弱势就是学习的需求</p><p>睡眠很重要，理由如下：</p><p>​    可以缓解压力</p><p>​    将神经元上突触的毒素清除，创建更多的突触 将新事物的特点与旧事物进行连接</p><p>用于更好的学习新事物。</p>        <h4 id="chapter3-即使有别人帮助你，还得靠自己"   >          <a href="#chapter3-即使有别人帮助你，还得靠自己" class="heading-link"><i class="fas fa-link"></i></a>chapter3 即使有别人帮助你，还得靠自己</h4>      <p>左脑(专注模式，逻辑模式)：记忆新事物，前提是注意力不被分散</p><p>右脑(散发模式)：大脑游走，表达事物。</p><p>学习最大的部分解决问题</p>        <h4 id="chapter4-变得吃力，却同时变得更加容易"   >          <a href="#chapter4-变得吃力，却同时变得更加容易" class="heading-link"><i class="fas fa-link"></i></a>chapter4 变得吃力，却同时变得更加容易</h4>      <p>学习新事物       难点      找不到与之有关的联系</p><p>学习的表面:只知道名字和类别</p><p>学习的主要:最让你感觉到最真实的那部分。</p><p>方向:有大体方向，不要卡在细节</p><p>​        当细节过后，补全细节</p>        <h4 id="chapter5-你还得做大量的研究"   >          <a href="#chapter5-你还得做大量的研究" class="heading-link"><i class="fas fa-link"></i></a>chapter5  你还得做大量的研究</h4>      <p>错误是学习的一部分</p><p>由创意的人存在的问题：太过相信直觉认为正确的事情。</p><p>上手不等同于掌握 这样只有表面印在了我的大脑中</p><p>要有练习的时间</p><p>学习一件事新事物，是在不同的事物之间来回，而不是同一事物间来回。这样可以存在空间复习出处理和学习事物。</p><p>过一段时间后，用练习和直觉来确实的学习事物。</p>        <h4 id="chapter6-所有东西都与过程有关"   >          <a href="#chapter6-所有东西都与过程有关" class="heading-link"><i class="fas fa-link"></i></a>chapter6 所有东西都与过程有关</h4>      <p>拖延是正常的，学习新事物没有那么愉快。在学习新事物很难起手。</p><p>学习新事物的同时等同于在吃苦。</p><p>没有天赋与才能，天赋与才能的起点:I AM WILLING TO DO IT(我愿意去做)，通过天赋与才能获取到的事物只是附属品。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于学习&quot;   &gt;
          &lt;a href=&quot;#关于学习&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;关于学习&lt;/h2&gt;
      
        &lt;h3 id=&quot;世界观：&quot;   &gt;
          &lt;a href=&quot;#世界观：&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;世界观：&lt;/h3&gt;
      &lt;p&gt;​    不学习就不会产生进步，将会愚昧无知，自甘堕落。学习就是体验痛苦，重复同样的事物，却没有任何意思。我不喜欢学习，也不喜欢学习的成果，我想要的永远没有得到过。我只是在获取在这个世界的生存方式。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="方法论" scheme="http://www.nscblog.top/tags/%E6%96%B9%E6%B3%95%E8%AE%BA/"/>
    
      <category term="学习" scheme="http://www.nscblog.top/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>程序设计和C语言</title>
    <link href="http://www.nscblog.top/2020/03/20/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%92%8CC%E8%AF%AD%E8%A8%80/"/>
    <id>http://www.nscblog.top/2020/03/20/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%92%8CC%E8%AF%AD%E8%A8%80/</id>
    <published>2020-03-20T12:47:52.000Z</published>
    <updated>2020-06-01T12:54:52.213Z</updated>
    
    <content type="html"><![CDATA[        <h2 id="1-1-什么是计算机程序"   >          <a href="#1-1-什么是计算机程序" class="heading-link"><i class="fas fa-link"></i></a>1.1    什么是计算机程序</h2>      <blockquote><p>程序: 一组计算机能识别和执行的指令</p></blockquote><p><strong>每条指令使计算机执行特定的操作,一个特定的指令序列(指令集合),用来完成一定的功能.</strong></p><p><u><strong><em>计算机的本质是程序的机器</em></strong></u></p>        <h2 id="1-2-什么是计算机语言"   >          <a href="#1-2-什么是计算机语言" class="heading-link"><i class="fas fa-link"></i></a>1.2    什么是计算机语言</h2>      <p>个人简单理解:人与计算机交互的工具</p><blockquote><p>计算机与人都能识别的语言这就是计算机语言</p></blockquote><p>计算机语言的发展阶段:</p><p><strong>机器语言</strong></p><p><strong><u><em>计算机是基于二进制工作的</em></u></strong></p><blockquote><p>机器指令:计算机能够识别和接受的二进制代码.</p><p>机器语言:机器指令的集合.</p></blockquote><p>缺点:不容易使用,难以修改程序代码</p><p><strong>符号语言(汇编语言)</strong></p><blockquote><p>符号语言:英文数字表示一个指令</p></blockquote><p>例如:ADD表示 <strong>加</strong></p><p>由于计算机不能直接识别 执行符号语言,所以要通过汇编程序的软件将符号语言的指令转换为机器指令. 转换的过程称为”代真”或”汇编”,因而符号语言又叫汇编语言或符号汇编</p><p>优点:</p><p>相对于机器语言方便使用</p><p>缺点:</p><p>程序可移植性差,机器依赖性强,如:机器A的上的程序无法在机器B上使用 </p><p>机器语言和汇编语言是完全<strong>依赖于具体机器特性</strong>的,是面向机器的语言,相对于其他语言来说更”贴近”计算机,背称为计算机<strong>低级语言.</strong></p><p><strong>高级语言</strong></p><p>不依赖于具体机器,它与具体计算机距离较远.</p><p>世界第一个计算机高级语言  FORTRAN语言(20世纪50年代)</p><p>高级语言需要通过<strong>编译器</strong>程序软件转换为机器指令的程序</p><p>高级语言的一个语句一般对应多条机器指令</p><p>优点:</p><p>高级语言数据结构丰富</p><p>不依赖于具体机器,它与具体计算机距离较远.(可移植性强)</p><p>简单易学,容易推广</p><p>高级语言的出现是计算机发展史上”惊人的成就”</p><p><strong>高级语言的发展阶段</strong></p><p>非结构化语言</p><blockquote><p>符合语法要求,没有严格规范要求</p><p>程序难以维护和难以阅读</p><p>早期的BASIC FORTRAN和ALGOL都属于非结构化语言</p></blockquote><p>结构化语言</p><blockquote><p>为了解决非结构化语言的缺点(程序难以维护和阅读),提出结构化程序设计方法</p><p>程序由良好的基本结构(顺序结构 分支结构 循环结构)构成 程序中的流程不得随意跳转</p><p>程序结构清晰,易于编写 阅读和维护</p><p>QBASIC FORTRAN77和C语言都是结构化语言 </p><p>语言特点:支持结构化程序设计方法</p><p>缺点:</p><p>​    在编写程序时需要制定具体每个过程的细节 —-&gt; 规模小的程序 还可以 规模较大的程序显得力不从心(面向过程编程)</p></blockquote><p>面向对象语言</p><p>对象由数据以及对数据进行的操作构成的</p><p>用于处理规模较大的程序</p>        <h2 id="1-3-C语言的发展及其特点"   >          <a href="#1-3-C语言的发展及其特点" class="heading-link"><i class="fas fa-link"></i></a>1.3    C语言的发展及其特点</h2>      <p>C语言是国际广泛流行的计算机高级语言。</p><p>c语言的祖先是BCPL语言 c语言的设计最初是为了Unix提供一种工作语言 </p><p>C语言的特点:</p><p>1.语言简洁 紧凑,使用方便灵活</p><p>2.运算符丰富</p><p>3.数据类型丰富</p><p>4.具有结构化的控制语句</p><p>5.语法灵活,程序设计自由度大</p><p><strong>6.C语言允许直接访问物理地址</strong></p><p><strong>7.C语言程序可移植性好</strong></p><p><strong>8.代码质量高,程序执行效率高</strong></p><p><strong>C语言原来是专门为系统软件而设计的</strong></p>        <h2 id="1-4-最简单的C语言程序"   >          <a href="#1-4-最简单的C语言程序" class="heading-link"><i class="fas fa-link"></i></a>1.4    最简单的C语言程序</h2>              <h3 id="1-4-1-最简单的C语言程举例"   >          <a href="#1-4-1-最简单的C语言程举例" class="heading-link"><i class="fas fa-link"></i></a>1.4.1    最简单的C语言程举例</h3>      <figure class="highlight c"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;<span class="comment">//调用max函数的声明 </span></span><br><span class="line"><span class="keyword">int</span> a,b,c;<span class="comment">//声明变量a b c</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&amp;: 地址符 </span></span><br><span class="line"><span class="comment">&amp;a:a变量的地址 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d,%d"</span>,&amp;a,&amp;b);<span class="comment">//scanf是一个输入函数 输入a和b的值</span></span><br><span class="line">c = <span class="built_in">max</span>(a,b);<span class="comment">//调用max函数 将得到的值复制给C</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"max=%d\n"</span>,c);<span class="comment">//输出C的值 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&gt;y)&#123;</span><br><span class="line"><span class="keyword">return</span>(x);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span>(y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="1-4-2-c语言程序的结构"   >          <a href="#1-4-2-c语言程序的结构" class="heading-link"><i class="fas fa-link"></i></a>1.4.2 c语言程序的结构</h3>      <p>c语言程序的结构:</p><p><strong>1.一个程序由一个或多个源程序文件组成。</strong></p><figure class="highlight markdown"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>规模较小的程序，往往只包括一个源程序文件(一个源文件中只有一个main函数)。</span><br><span class="line">一个源程序文件中可以包括3个部分:</span><br><span class="line"><span class="bullet">1. </span>预处理指令 如:#include<span class="xml"><span class="tag">&lt;<span class="name">stdio.h</span>&gt;</span></span> #define</span><br><span class="line"><span class="code">C编译系统在对源程序进行"翻译"(转换为二进制)以前,</span></span><br><span class="line"><span class="code">        先由一个"预处理器"对指令进行预处理:将头文件的内容读取,放在#include后面</span></span><br><span class="line"><span class="code">        编译程序对源程序进行编译得到目标程序（机器指令）</span></span><br><span class="line"><span class="bullet">2. </span>全局声明(在函数之外进行的数据声明)</span><br><span class="line"><span class="code">相当于Java中成员属性</span></span><br><span class="line"><span class="code">作用范围:整个源程序文件</span></span><br><span class="line"><span class="bullet">3. </span>函数定义</span><br><span class="line"><span class="code">每个函数用来实现一定的功能。调用这些函数时，会完成函数定义中指定的功能。</span></span><br></pre></td></tr></table></div></figure><p><strong>2.函数是C程序的主要组成部分</strong></p><figure class="highlight markdown"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">函数是C程序的基本单位，在设计良好的程序中，每个函数都用来实现一个或几个特地当的功能。</span><br><span class="line">编写C程序的主要工作就是编写一个个函数。</span><br><span class="line">C程序有且仅有一个main函数，有一个或多个函数组成</span><br><span class="line"></span><br><span class="line">当程序规模较大时，为了方便编译 调试和管理，一个程序可以包括若干个源程序文件 一个源程序文件就是一个程序模块</span><br><span class="line"></span><br><span class="line">编译时，对个源文件程序进行编译得到相应的目标程序，将目标程序连接成为一个统一的二进制可执行程序</span><br><span class="line"></span><br><span class="line">程序中调用的函数可以是自定函数，可以是库函数</span><br></pre></td></tr></table></div></figure><p><strong>3.一个函数包括两个部分</strong></p><p>int max (int x)</p><p>{}</p><p>​    <strong>函数首部</strong></p><blockquote><p>int                 max             (int                             x)</p><p>函数类型       函数名        函数参数类型            函数参数名</p></blockquote><p>​    <strong>函数体</strong>:{}(离函数首部最近的)</p><p>​        声明部分:</p><p>​            在调用函数中定义变量</p><p>​            对被调用函数进行声明</p><p>​        执行部分:</p><p>​            {}中的语句,指定在函数中进行的操作 也可以什么都不做即一个空函数</p><p><strong>4.程序总是从main函数开始执行的</strong></p><p><strong>5.程序中对计算机的操作是由函数中的C语句完成的。</strong></p><p><strong>6.在每个数据声明语句的最后必须有一个分号</strong></p><p><strong>7.C语言本身不提供输入输出语句</strong></p><p>​    输入输出的操作是由库函数来完成的</p><p><strong>8.程序应当包含注释</strong></p><p>​    增加必要的注释，提高程序的可读性。</p>        <h2 id="1-5-运行C程序的步骤与方法"   >          <a href="#1-5-运行C程序的步骤与方法" class="heading-link"><i class="fas fa-link"></i></a>1.5 运行C程序的步骤与方法</h2>      <p><strong>1.上级输入和编辑源程序</strong></p><p><strong>2.对源程序进行编译</strong></p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.先对程序中的预处理指令进行编译预处理</span><br><span class="line">2.在对完整的源程序进行编译</span><br><span class="line"></span><br><span class="line">编译的作用：</span><br><span class="line">首先是检查源程序中是否有语法错误</span><br><span class="line">没有语法错误之后，再编译时，自动包括了预编译和正式编译连个阶段，用户不用发出两次指令</span><br></pre></td></tr></table></div></figure><p><strong>3.进行连接处理</strong></p><p>编译后得到的目标模块连接装配起来,再与函数库连接成一个整体,生成一个课供计算机执行的目标程序,称为 <strong>可执行程序</strong></p><p>连接工作由”连接编辑程序”的软件来实现</p><p><strong>4.运行可执行程序</strong></p><p><img src="../../public/images/imgs/%E8%BF%90%E8%A1%8CC%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="运行C程序的流程图"></p>        <h2 id="1-6-程序设计的任务"   >          <a href="#1-6-程序设计的任务" class="heading-link"><i class="fas fa-link"></i></a>1.6 程序设计的任务</h2>      <blockquote><p>程序设计是指从确定任务到得到结果,写出文档的全过程</p></blockquote><p>一般经历以下几个工作阶段:</p><p><strong>1.问题分析</strong></p><p>​    研究给定条件 分析最终目标,找出解题规律,选择合适的解题方法</p><p><strong>2.设计算法</strong></p><p>​    设计出解题的方法和具体步骤</p><p><strong>3.编写程序</strong></p><p>​    根据得出的算法,用高级语言编写出源程序</p><p><strong>4.对源程序进行编辑 编译和连接,得到执行程序</strong></p><p><strong>5.运行程序,分析结果</strong></p><p>​    对程序进行调试,发现和排除程序中故障的工程</p><p>​    测试:设计多组测试数据,检查不同数据的运行情况,尽量找出程序中存在的漏洞,并修改程序,使程序能够适应各种情况.</p><p><strong>6.编写程序文档</strong></p><p>提供程序说明书内容应该包括</p><p>程序名称    程序功能    运行环境    程序安装和启动,需要输入的数据,以及使用注意事项</p><blockquote><p>软件是计算机程序和程序文档的总称</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        
        &lt;h2 id=&quot;1-1-什么是计算机程序&quot;   &gt;
          &lt;a href=&quot;#1-1-什么是计算机程序&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;1.1    什么是计算机程序&lt;/h2
      
    
    </summary>
    
    
    
      <category term="学习" scheme="http://www.nscblog.top/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="专升本" scheme="http://www.nscblog.top/tags/%E4%B8%93%E5%8D%87%E6%9C%AC/"/>
    
      <category term="C语言" scheme="http://www.nscblog.top/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
</feed>
