{"meta":{"title":"Nsc","subtitle":"天道酬勤","description":"不要懒,好好干好一件事就行","author":"侬仕超","url":"http://www.nscblog.top","root":"/"},"pages":[{"title":"about","date":"2020-04-29T15:50:29.000Z","updated":"2020-06-10T08:13:40.075Z","comments":false,"path":"about/index.html","permalink":"http://www.nscblog.top/about/index.html","excerpt":"","text":"关于我|About me 简单搭一个博客，记录自我生活的碎片。不希望在生命中没有什么可以记忆。 我名叫侬仕超，对世界不感兴趣，像一条咸鱼，没有特别的情况，不喜欢与人交流。也讨厌孤独，一个人，有时感觉时间就是静止的。在自我生命中追寻生命的意义。 喜欢看一些有意义的番剧，电影。对有意思的事情充满的好奇心。 喜欢计算机知识，目前学会了Java编程，会使用Mybatis+SpringBoot进行SM项目编程。 从呱呱落地到现在，我从来没有什么事做成功的，以前认为什么都不重要，感觉过的开心就好，一直没心没肺的过着舒适的生活。 即将步入社会的我，现在却感觉到了压力，啥也不会，现在只希望自己不能偷懒了。将近23年，吃过亏，偷过懒，现在才领悟到这简单的道理，脸上漏出的苦笑啊。 高中我很喜欢政治哲学，记得政治老师说过他学校的校训——天道酬勤。大家时间都一样，只有我清楚我今天时间去哪里了。"},{"title":"categories","date":"2020-05-03T14:06:36.000Z","updated":"2020-06-10T08:13:08.021Z","comments":false,"path":"categories/index.html","permalink":"http://www.nscblog.top/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-05-03T11:34:38.000Z","updated":"2020-06-10T08:12:59.008Z","comments":false,"path":"tags/index.html","permalink":"http://www.nscblog.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"用函数实现模块化程序设计","slug":"用函数实现模块化程序设计","date":"2020-05-30T12:43:07.000Z","updated":"2020-06-10T13:00:49.799Z","comments":true,"path":"2020/05/30/用函数实现模块化程序设计/","link":"","permalink":"http://www.nscblog.top/2020/05/30/%E7%94%A8%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0%E6%A8%A1%E5%9D%97%E5%8C%96%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/","excerpt":"第七章 用函数实现模块化程序设计 7.1为什么要用函数 函数就是功能，每个函数用来实现一个特定的功能。 在程序设计中要善于利用函数，来减少重复编写程序段的工作量实现模块化设计。 一个C程序可以由一个主函数和若干个其他函数构成 例7.1 123456789101112131415161718192021222324252627# include \"stdio.h\"int main()&#123; //声明print_star函数 告知编译器函数的相关信息 参数类型和数量 返回值类型 void print_star(); //声明print_message函数 void print_message(); //调用print_star函数 print_star(); //调用print_message函数 print_message(); //调用print_star函数 print_star(); return '\\0'; &#125; //定义print_star函数void print_star()&#123; printf(\"**********************\\n\"); &#125; //定义一个print_message函数void print_message()&#123; printf(\"Hello World!!\\n\"); &#125;","text":"第七章 用函数实现模块化程序设计 7.1为什么要用函数 函数就是功能，每个函数用来实现一个特定的功能。 在程序设计中要善于利用函数，来减少重复编写程序段的工作量实现模块化设计。 一个C程序可以由一个主函数和若干个其他函数构成 例7.1 123456789101112131415161718192021222324252627# include \"stdio.h\"int main()&#123; //声明print_star函数 告知编译器函数的相关信息 参数类型和数量 返回值类型 void print_star(); //声明print_message函数 void print_message(); //调用print_star函数 print_star(); //调用print_message函数 print_message(); //调用print_star函数 print_star(); return '\\0'; &#125; //定义print_star函数void print_star()&#123; printf(\"**********************\\n\"); &#125; //定义一个print_message函数void print_message()&#123; printf(\"Hello World!!\\n\"); &#125; 说明： 一个C程序由一个或多个程序模块组成，每个程序模块作为一个源程序文件。 一个源程序文件由一个或多个函数以及其他有关内容组成。一个源程序文件是一个编译单位。 C程序执行是从main函数开始的。在main函数中结束整个程序的运行。 所有函数都是平行的，定义函数时是分别进行，相互独立的。 从用户使用的角度看，函数有两种。 库函数，由编译系统提供，不用自己定义，可以直接使用。 用户自定义函数。用于解决用户撰文需要的函数。 从函数形式上看，函数分两类。 无参函数。 有参函数。 7.2 怎样定义函数 C语言要求，在程序中用到的所有函数，必须“先定义，后使用”。 定义函数应包括以下几个内容： 函数名 函数返回值类型 函数参数名和类型，无参函数不需要这项 指定函数应当完成什么操作，函数的功能 7.2.2 定义函数的方法 定义无参函数 一般形式： 123456789类型名 函数名()&#123; 函数体&#125;或类型名 函数名(void)&#123; 函数体&#125; 注意： 函数体包括声明部分和语句部分 声明部分，如：int x; 语句部分，如：printf(“%d”,x); 定义有参函数 1234类型名 函数名()&#123; 函数体&#125; 定义空函数 12类型名 函数名()&#123;&#125; 空函数用于扩充新功能 7.3 调用函数 7.3.1 函数调用形式 按函数调用在程序中出现的形式和位置来分，可以有一下3种调用方式。 1.函数调用语句 把函数调用作为单独的语句 2.函数表达式 函数调用出现在另一个表达式中 3.函数参数 函数调用作为另一个函数的参数 7.3.2 函数调用时数据传递 形式参数 定义函数时的变量名 实际参数 调用时传递的常量，变量或表达式。 实参和形参间的数据传递 形参从实参那获取值。 7.3.3 函数调用的过程 发生函数调用时，函数的形参被临时分配内存单元 将实参对应的值传递给形参 执行被调用函数的语句 通过return语句将函数值带回主调函数（如果函数不需要返回值，则不需要return语句，函数定义类型应定义为void类型） 调用结束，形参单元被释放。实参没有改变 7.3.4 函数的返回值 函数的返回值：函数调用使主调函数能得到一个确定的值。 说明(对于函数返回值)： 函数的返回值是通过函数中的return语句获得的。 定义函数时指定函数返回值类型。 在定义函数时指定函数类型一般和return语句中的表达式类型一致。函数类型决定返回值的类型。数值类型会自动进行类型转换。 没有返回值的函数，定义为void类型 7.4 对被调用函数的声明和函数原型 函数调用所需条件 已经被定义好的函数 使用库函数，使用预编译指令（#include）将有关库函数时所需用到的信息“包含”到本文件中来。 使用自定义函数，在主调函数中对被调用函数进行声明。（声明是为了正确识别和检查被调用的函数[包括信息有：函数名，返回值类型，参数数量，顺序，类型]是否合法） 函数原型（函数声明）有两种： 函数类型 函数名（参数类型1 参数名1，参数类型2 参数2）； 函数类型 函数名（参数类型1，参数类型2）； 7.5 函数的嵌套调用 一张图就解释清楚了 7.6 函数的递归调用 在调用一个函数的过程有出现直接或间接的调用该函数本身，称为函数的递归调用。 例如： 1234567891011121314151617181920# include \"stdio.h\"int main() &#123; int num=5; //声明函数 int age(int num); printf(\"%d\",age(num));//在输出函数里调用函数 return 0; &#125;//定义函数int age(int num)&#123; int c; if(num==1) c=10; else c=age(num-1)+2; return c;&#125; 如果要求递归过程不是无限制进行下去，必须具有一个结束递归过程的条件。 12345678910111213141516171819202122232425# include \"stdio.h\"/*使用递归求阶乘 */ int main() &#123; int num=10; //声明函数 int factorial(int num); printf(\"%d\",factorial(num));//在输出函数里调用函数 return 0; &#125;//定义函数int factorial(int num)&#123; int c; if(num==1||num==0) c=1; else if(num&lt;0) printf(\"参数出错\"); else c=factorial(num-1)*num; return c;&#125; 7.7 数组作为函数参数 凡是变量可以出现的地方，都可以用数组元素代替。用法与变量相同。 传递数组名，传递的是第一个元素地址。 7.7.1 数组元素作函数实参 数组元素作函数实参时，把实参的值传给形参，是“值传递”方式。 1234567891011121314151617181920212223242526272829# include \"stdio.h\"/* 练习用数组元素作为参数 */int main()&#123; int a[10],i,n,maxNum; int max(int x,int y);//声明函数 printf(\"请依次输入10个数\\n\"); for(i=0;i&lt;10;i++)//分别对元素进行赋值 &#123; scanf(\"%d\",&amp;a[i]); &#125; for(i=1,maxNum=a[0];i&lt;10;i++)//调用函数 &#123; if(max(a[i],maxNum)&gt;maxNum) &#123; maxNum=max(a[i],maxNum); n=i+1; &#125; &#125; printf(\"%d\\t%d\\n\",maxNum,n);&#125; //定义函数int max(int x,int y)&#123; return x&gt;y?x:y;&#125; 7.7.2 数组名作函数参数 用数组元素作实参时，向形参变量传递的是数组元素的值，而用数组名作函数实参时，向形参传递的是数组元素的地址。 12345678910111213141516171819202122232425262728293031323334# include \"stdio.h\"/* 练习用数组名作为参数 */int main()&#123; int i; float a[10],av; float average(float array[10]);//声明函数 printf(\"请依次输入10个数\\n\"); for(i=0;i&lt;10;i++)//分别对元素进行赋值 &#123; scanf(\"%f\",&amp;a[i]); &#125; av=average(a); printf(\"%f\",av);&#125; //定义函数float average(float array[10])&#123; int i; float sum,aver; for(i=1,sum=array[0];i&lt;10;i++) &#123; sum+=array[i]; &#125; aver=sum/10; return aver;&#125;/*实参与形参类型不一致，会出错形参数组可以不指定容量 可以这样定义：a[]*/ 12345678910111213141516171819202122232425262728293031323334# include \"stdio.h\"/* 练习用选择排序 */int main()&#123; int i; float a[10],av; void average(float array[],int n);//声明函数 printf(\"请依次输入10个数\\n\"); for(i=0;i&lt;10;i++)//分别对元素进行赋值 &#123; scanf(\"%f\",&amp;a[i]); &#125; average(a,10); for(i=0;i&lt;10;i++) printf(\"%f\\n\",a[i]);&#125; //定义函数void average(float array[],int n)&#123; int i,j,temp; for(i=0;i&lt;n-1;i++) for(j=i+1;j&lt;n;j++) &#123; if(array[i]&gt;array[j]) &#123; temp=array[i]; array[i]=array[j]; array[j]=temp; &#125; &#125;&#125; 7.7.3 多维数组作函数名 可以作为函数的实参和形参，可以省略第一维的大小，第二维不能省略，C语言编译系统不检查第一维的大小。 7.8 局部变量和全局变量 7.8.1 局部变量 定义变量的位置 函数的开头定义 函数内的复合语句内定义 函数外都定义 在复合语句内定义的变量旨在本复合语句范围内有效（花括号范围内），在本复合语句内才能引用他们。复合语句内不能使用，这被成为局部变量。 形式参数也是局部变量。 7.8.2 全局变量 全局变量：函数外部定义的变量成为外部变量，外部变量也称全程变量 作用范围：定义行到主函数结束，程序是从主函数开始到主函数结束 全局变量采用大驼峰命名 全局变量与局部变量重名，局部变量优先 如： 1234567891011121314151617# include \"stdio.h\" int a=3,b=5; int main() &#123; int max(int a,int b); int a=8; printf(\"the max num is %d \\n\",max(a,b)); &#125; int max(int a,int b) &#123; return a&gt;b?a:b; &#125;结果：the max num is 8 7.9 变量的存储方式和生存期 7.9.1 动态存储方式和静态存储方式 从空间(作用域)的角度来观察，变量可以分为全局变量和局部变量 从变量存在的时间(生存期)来看，变量存储存储方式有两种： 静态存储：在程序运行期间由系统分配固定的存储空间的方式。 动态存储：在程序运行期间根据需要进行动态的分配存储空间。 用户可以使用的内存存储空间结构： 程序区 静态存储区 动态存储区 全局按量全部存放在静态存储区中，在程序开始执行时给全局变量分配存储区，程序执行完毕后就释放。 动态存储区存放： 函数形式参数。在调用函数时给形参分配存储空间。 函数中定义的没有用关键字static声明的变量，自动变量 函数调用时的现场保护和返回地址。 在函数调用开始时分配动态存储空间，函数结束时释放这些空间。 在程序执行过程中，同一个程序调用两次相同函数，两次分配的给这些局部变量的存储空间地址可能是不相同的。 每个函数中的局部变量生存期只是程序执行期的一部分。 在程序执行过程中，先后调用函数，动态分配和释放空间。 C语言中，数据类型和数据存储类别是变量和函数的属性。 7.9.2 局部变量的存储类别 1.自动变量（auto变量） 函数中的形参和函数中局部变量，都是动态分配的，调用该函数是，系统会给这些变量分配存储空间，在函数调用结束后，就会自动释放这些存储空间。这类局部变量称为自动变量。 1.以auto修饰的变量 2.没有关键字修饰的。默认为自动变量 2.静态局部变量(static局部变量) 局部变量的值在函数调用后结束不小时而继续保留原值，即不释放存储空间，在下次调用函数时，该变量已有值。这是该指定该局部变量为“静态局部变量” 12345678910111213141516171819202122# include \"stdio.h\"int main()&#123; void test(); test(); test(); return 0;&#125; void test()&#123; static int a =1; printf(\"%d\\n\",++a);&#125;23--------------------------------Process exited after 0.01536 seconds with return value 0请按任意键继续. . . 静态存储要多占内存，不能合理利用资源（和动态存储对比），且降低了程序的可读性，因此，若非必要，不要多用静态局部变量。 3.寄存器变量（register变量） 用于提高效率，寄存器的存取速度远大于内存的存取速度。 关键字是: register int f 寄存器变量存储在CPU中的寄存器中。 7.9.3 全局变量的存储类别 全局变量都是存放于静态存放区中的，因此它们的生存期（生命周期）是固定的。 作用域：定义行开始到本程序文件末尾 1.一个文件内扩展外部变量的作用域 在定义点之前的函数需要引用该外部变量，在引用之前用关键字externa对该变量作“外部变量声明”。 123456789101112131415161718# include \"stdio.h\"int main()&#123; int max(); extern int A,B,C;//将外部变量的作用扩展到由此处开始。 scanf(\"%d%d%d\",&amp;A,&amp;B,&amp;C); printf(\"%d\",max()); return 0;&#125; int A,B,C;//定义外部变量int max()&#123; int m; m=A&gt;B?A:B; return m&gt;C?m:C; &#125; 注意： 建议吧外部函数定义写在所有函数之前，可以避免不必要的extern的声明。 使用extern时，类型名可以省略 2.将外部变量作用域扩展到其他文件 ​ 如果一个程序包含两个文件，在两个文件中都要用到同一个外部变量Num,不能分别在两个文件找那个各自定义一个外部变量，连接时会出现“重复定义”的错误。 正确做法是： 在任意一个文件中定义外部变量 另一个文件中用extern对Num作“外部变量声明”。 3.将外部变量的作用域限制在本文件中 只限在本文件使用的外部变量，加关键字:static static声明一个变量的作用： 对局部变量用static声明，把分配静态存储区，该变量在整个程序执行期间不释放，其分配的空间始终存在。 对全局变量用static声明，该变量的作用域只限本文件模块。 7.9.4 存储类别小结 从作用域角度分析，有局部变量和全局变量 从生存期来区分，有静态存储和动态存储 从变量值存放的位置来区分，有内存中的动态存储区，内存中的静态存储区，CPU中的寄存器 作用域和生存期的概念：作用域是空间上的描述；生存期是时间的的描述 static对局部变量来说：使变量从动态存储转为静态存储；static对于全局变量来说：规定了其作用域 7.10 关于定义和声明 定义是声明的一种体现，如int a; 建立存储空间的声明称为定义(定义一个变量，分配内存空间) 不需要简历存储存储空间的声明称为声明。（如：int max(int);） 外部变量只能定义一次，可多次声明。系统根据外部变量的定义分配存储单元，同时进行初始化。 7.11 内部函数和外部函数 7.11.1 内部函数 在定义内部函数时，在函数名和函数类型的前面加static 即： static 类型名 函数名（形参列表） { 函数体 } 不用担心函数是否会与其他文件模块函数同名 7.11.2 外部函数 在定义函数时，在函数首部的最左端加关键字extern，这函数是外部函数。关键字省略，默认为外部函数。 如： extern int fun(int a,int b) { ​ 函数体 } 在需要调用此函数的其他文件中，需要对此函数做声明，声明时需要加extern关键字。表示这是其他文件中定义的外部函数。 由于函数在本质上时外部的，在程序中经常要调用其他文件的外部函数，为了方便编程，C语言允许声明函数时可以省略extern 在调用方中声明一个函数，这个函数就是被调用函数的函数原型。 函数原型的作用： 扩展函数的作用域，常见的例子就是 # include","categories":[],"tags":[{"name":"学习","slug":"学习","permalink":"http://www.nscblog.top/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"专升本","slug":"专升本","permalink":"http://www.nscblog.top/tags/%E4%B8%93%E5%8D%87%E6%9C%AC/"},{"name":"C语言","slug":"C语言","permalink":"http://www.nscblog.top/tags/C%E8%AF%AD%E8%A8%80/"}]},{"title":"利用数组处理批量数据","slug":"利用数组处理批量数据","date":"2020-05-24T12:42:34.000Z","updated":"2020-06-10T13:01:25.724Z","comments":true,"path":"2020/05/24/利用数组处理批量数据/","link":"","permalink":"http://www.nscblog.top/2020/05/24/%E5%88%A9%E7%94%A8%E6%95%B0%E7%BB%84%E5%A4%84%E7%90%86%E6%89%B9%E9%87%8F%E6%95%B0%E6%8D%AE/","excerpt":"第6章 利用数组处理批量数据 数组特点： 数组是一组有序数据的集合 用一个数组名和下标表示一个元素 数组中的所有元素都属于同一个数据类型","text":"第6章 利用数组处理批量数据 数组特点： 数组是一组有序数据的集合 用一个数组名和下标表示一个元素 数组中的所有元素都属于同一个数据类型 6.1 怎样定义和引用一维数组 6.1.1 怎样定义一维数组 语法： 类型符 数组名[常量表达式] 如： int a[10]; 说明： 数组命名规则与变量名相同，遵循标识符命名规则。 定义数组是，需要指定长度。 常量表达式可以包括常量和符号常量 数组在内存中是一片连续的空间。 在非主函数中定义数组，其长度可以是变量或非常量表达式。 如果指定数组为静态存储方式，则不能用“可变长数组”。如: static int a[2*n] 6.1.2 怎样引用一维数组和元素 引用数组元素的表示形式： 数组名[下标] 注意： 下标可以是整形常量或整形表达式。 ​ a[0]=a[5]+a[7]-a[2*3]; 数组下标范围是0到（定义长度-1） 12345678910# include &lt;stdio.h&gt;int main()&#123; int a[10],i=9,j=0; for(;j&lt;10;j++) a[j]=j; for(;i&gt;=0;i--) printf(\"a[%d]=%d\\n\",i,a[i]); return 0; &#125; 6.1.3 一维数组的初始化 定义数组时对全部元素赋值 int a[5]={0,1,2,3,4}; 可以给数组一部分元素赋值。 int a[10]={0,1,2,3}; //系统给后续元素赋值为0 如果想使一个数组中元素值为0，可以写成 int a[3]={0,0,0}; 或 int a[3]={0}； 6.1.4 一维数组程序举例 12345678910111213141516171819# include &lt;stdio.h&gt;/* 利用数组来实现斐波那契数列 */int main ()&#123; int a[20]=&#123;1,1&#125;; int i,j; for(i=2;i&lt;20;i++) &#123; a[i]=a[i-1]+a[i-2]; &#125; for(i=0;i&lt;20;i++) &#123; printf(\"a[%d]=%d\\n\",i,a[i]); &#125; return 0; &#125; 123456789101112131415161718192021222324252627#include&lt;stdio.h&gt;/* 用一维数组实现冒泡排序 */ int main()&#123; int a[5]=&#123;1,6,7,8,5&#125;; int i,j=0,temp=0; for(i=0;i&lt;5;i++) &#123; for(j=0;j&lt;5-i;j++) &#123; if(a[j]&gt;a[j+1]) &#123; temp=a[j]; a[j]=a[j+1]; a[j+1]=temp; &#125; &#125; &#125; for(i=0;i&lt;5;i++) &#123; printf(\"a[%d]=%d\\n\",i,a[i]); &#125; return 0;&#125; 6.2 怎样定义和引用二维数组 二维数组常称矩阵 6.2.1 怎样定义二维数组 二维数组定义的一般表现形式 类型说明符 数组名[常量表达式] [常量表达式]; 如： float a[3] [4],b[4] [5]; 定义a为3行4列的数组，b为5行10列的数组。 C语言中二维数组中元素的排列的顺序是按行存放的，即在内存中存放第一行的元素，接着再存放第二行的元素。内存中中的个元素是连续存放的，不是二维的，是线性的。 6.2.2 怎样引用二维数组 二维数组元素的表示形式为 数组名[下标] [下标] 下标应是整形表达式（对常量使用运算符连接进行运算） 6.2.3 二维数组的初始化 分行给二维数组赋初值 可以，将所有数据卸载一个花括号内，按数组元素在内存中的排列顺序对个元素赋值。 可以对部分赋值。没有赋值的部分，系统会自动赋值为0 如果对全部元素都赋值，则定义数组是对第一维长度可以不指定，但第二维的长度不能省。 6.2.4 二维数组程序举例 1234567891011121314151617181920212223242526# include &lt;stdio.h&gt;/* 二维数组元素互换 */int main()&#123; int a[2][3]=&#123;1,2,3,4,5,6&#125;; int b[3][2]; int i,j; for(i=0;i&lt;2;i++) &#123; for(j=0;j&lt;3;j++) &#123; b[j][i]=a[i][j]; &#125; &#125; for(i=0;i&lt;3;i++) &#123; for(j=0;j&lt;2;j++) &#123; printf(\"%d\\t\",b[i][j]); &#125; printf(\"\\n\"); &#125; return 0;&#125; 1234567891011121314151617# include &lt;stdio.h&gt;/* 找出二维数组中最大的数 */int main()&#123; int a[2][3]=&#123;1,2,3,4,5,6&#125;; int max=a[0][0],i,j; for(i=0;i&lt;2;i++) for(j=0;j&lt;3;j++) &#123; if(a[i][j]&gt;max) max=a[i][j]; &#125;; printf(\"max=%d\",max); return 0;&#125; 6.3 字符数组 6.3.1 怎样定义字符数组 char c[10]; c[10]=’3’; 因为字符型数据是以ASCII码存放的，因此，也可以用整形数组存放字符 6.3.2 字符数组的初始化 一次将各个字符赋值给数组中各元素。 部分赋值元素，剩余没有赋值的部分被系统自定义为空字符 ‘\\0’ 不赋值，默认是null 即 ‘\\0’ 6.3.3 怎样引用字符数组中的元素 可以引用字符数组中一个元素，得到一个字符。 6.3.4 字符串和字符串结束的标志 在C语言中是将字符串作为字符数组来处理的。 C语言规定了一个“字符串结束的标志”，以null 即’\\0’ 作为结束标志。 如果字符数组中存有若干个字符，前9个字符都不是空字符，而地10个是’\\0’ ，它的有效字符为9个，也就是说遇到字符’\\0’时，表示字符串结束，把它前面的字符组成一个字符串。 null字符的位置决定了字符数组的长度，或是字符串的长度。 字符数组初始化一种方法：使用字符串常量来使字符数组初始化。 如：char c[]={“i am student.”};也可以省略花括号 ​ char c[]=”i am student.”; 空字符也是字符串的长度的一部分，字符串的长度还要加一个空字符的位置。 ​ char c[]=”i am student.”;等价于a[] 与d[]不一样 ​ char a[]={‘i’,’ ‘,’a’,’m’,’ ‘,’s’,’t’,’u’,’d’,’e’,’n’,’t’,’.’,’\\0’}; ​ char d[]={‘i’,’ ‘,’a’,’m’,’ ‘,’s’,’t’,’u’,’d’,’e’,’n’,’t’,’.’}; 说明：字符数组并不要求它的最后一个字符为null，甚至可以没有null ​ 但为了处理方法一致，便于测定字符串的实际长度，在字符数组中加一个’\\0’.便于引用字符数组中的字符串。 6.3.5 字符数组的输入输出 字符数组的输入输出： 1.逐个字符输入输出，用格式符 %c 输出或输入一个字符 2.将整个字符串一次输入或输出。用%s格式符 ​ 如： char c[]={“chair”}; ​ printf(“%s\\n”,c); 说明： 输出字符不包括’\\0’ 使用%s时，printf函数中输出项是字符数组名，而不是数组元素名。 如果数组长度大于字符串时，当检测到null时结束 当数组中包含多个null是，遇到第一个null输出结束 可以用scanf函数输入一个字符串。如：scanf(“%s”,c); scanf函数输入项是字符数组名，不需要使用地址符，因为在C语言中数组名代表该数组的起始位置。 printf(“%s\\n”,c); 执行过程，找到数组名c的起始位置，然后逐个输出其中的字符。直到遇到null 即’\\0’时停止 6.3.6 使用字符串处理函数 puts函数 输出字符串的函数 puts(字符数组) 作用是将一个字符串（以’\\0’结束的字符序列）输出到终端。 gets函数 输入字符串的函数 gets(字符数组) 目的是向字符数组输入一个字符串 注意puts和gets函数只能输出或输入一个字符串 strcat函数 字符串连接函数 strcat(字符数组1，字符数组2)，作用是将两个字符串连接起来 说明： 字符数组1必须足够大，才能容纳连接后的新字符串。 连接后，字符串1的’\\0’取消，只保留字符串2的’\\0’ strcpy和strncpy 字符串复制函数 strcpy(字符数组1，字符串2) 将字符串2复制到字符数组1 说明： 字符数组1的长度要等于或大于字符串2 字符数组1必须是数组名，字符串2既可以是字符数组名，也可以是一个字符串常量。 字符串2会替换掉字符数组1前字符串2的字符，剩余的不变 不能使用赋值语句将一个字符串常量或字符数组直接给一个字符数组。只能使用strcpy函数将字符串赋值到另一个字符数组里去。 可以使用strncpy函数将字符串2前面n个字符赋值到字符数组1去。 strncpy(字符数组1，字符串2，几个字符); strcmp函数 字符串比较函数 strcmp(字符串1，字符串2) 比较字符串1和字符串2 比较的是内容是值 说明： 比较规则:将两个字符串自左到右逐个字符相比（按ASCII码值进行比较）直到出现不同字符或遇到’\\0’为止 全部字符相同，则认为两个字符串相等； 如果出现不相同字符，则以第一对不相同的字符比较结果为准。 不能直接使用数组名比较字符串，只能用strcmp函数进行比较 strcmp的返回值 0代表两个字符串相等 正整数表示字符串1&gt;字符串2 负整数表示字符串1&lt;字符串2 strlen 函数 测试字符串长度的函数 strlen(字符数组); 函数的值为字符串的实际长度，不包括’\\0’ strlwr函数 转换为小写 strlwr(字符串)； 将字符串中大写字母转换为小写。 strupr函数 转换为大写 strupr(字符串); 将字符串中小写字母转换为大写。 库函数是由编译系统提供，不同的编译系统提供的函数可能不同。 在使用字符串处理函数是，应当在程序文件的开头用#include&lt;string.h&gt; 6.3.7 字符数组应用举例 看书上 习题 12345678910111213141516171819202122232425262728293031# include \"stdio.h\"# include \"math.h\"# include \"string.h\"int main()&#123; /* 写上1到100的全部整数，然后逐个判断他们是否素数， 找出一个非素数，就把他们挖掉，最后剩下的就是素数。 */ int a[100],i,j; for(i=0;i&lt;100;i++) a[i]=i+1; for(i=3;i&lt;100;i++) &#123; for(j=2;j&lt;a[i];j++) &#123; if(a[i]%j==0) &#123; a[i]='\\0'; continue; &#125; &#125; &#125; for(i=0;i&lt;100;i++) &#123; if(a[i]!=0) printf(\"a[%d]=%d\\n\",i,a[i]); &#125; return 0;&#125; 123456789101112131415161718192021222324# include \"stdio.h\"# include \"math.h\"# include \"string.h\"int main()&#123; /* 使用选择排序对10个数排序。 */ int a[8]=&#123;4,6,1,5,9,7,3,8&#125;,i,j,temp; for(i=0;i&lt;8-1;i++) for(j=i+1;j&lt;8;j++) &#123; if(a[i]&lt;a[j]) &#123; temp=a[i]; a[i]=a[j]; a[j]=temp; &#125; &#125; for(i=0;i&lt;8;i++) printf(\"a[%d]=%d\\t\",i,a[i]); return 0;&#125; 1234567891011121314151617181920212223242526272829303132333435363738# include \"stdio.h\"# include \"math.h\"# include \"string.h\"int main()&#123; /* 使用选择排序对10个数排序。 */ int a[6]=&#123;1,3,5,6,7&#125;,end,temp1,temp2,num,i,j; //输入的数是最大的直接放在末尾 printf(\"请输入数据\\n\"); scanf(\"%d\",&amp;num); if(a[4]&lt;num) a[5]=num; else //在循环中找到合适的位置 for(i=0;i&lt;5;i++) &#123; //放好插入元素的位置 if(num&lt;a[i]) &#123; temp1=a[i]; a[i]=num; //剩余元素向后移动一个 for(j=i+1;j&lt;6;j++) &#123; temp2=a[j]; a[j]=temp1; temp1=temp2; &#125; break; &#125; &#125; for(i=0;i&lt;6;i++) printf(\"a[%d]=%d\\t\",i,a[i]); return 0;&#125;","categories":[],"tags":[{"name":"学习","slug":"学习","permalink":"http://www.nscblog.top/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"专升本","slug":"专升本","permalink":"http://www.nscblog.top/tags/%E4%B8%93%E5%8D%87%E6%9C%AC/"},{"name":"C语言","slug":"C语言","permalink":"http://www.nscblog.top/tags/C%E8%AF%AD%E8%A8%80/"}]},{"title":"循环结构程序设计","slug":"循环结构程序设计","date":"2020-05-18T12:42:16.000Z","updated":"2020-06-10T12:54:30.261Z","comments":true,"path":"2020/05/18/循环结构程序设计/","link":"","permalink":"http://www.nscblog.top/2020/05/18/%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/","excerpt":"第五章 循环结构程序设计 5.1 为什么需要循环控制 用于处理需要进行重复的操作。 5.2 用while语句实现循环 语法结构: 12345while(表达式) 语句语句就是循环体：可以是单条语句，也可以是复合语句表达式被称为循环条件表达式：表达式的值为非0（真）时就执行循环体语句特点：先判断，在执行。 注意： 循环体如果是多个语句，应该用花括号括起来，作为复合语句的出现。 必须给i和sum赋初始值，否则值是随机的。 循环体中应有使循环趋向于结束的语句。","text":"第五章 循环结构程序设计 5.1 为什么需要循环控制 用于处理需要进行重复的操作。 5.2 用while语句实现循环 语法结构: 12345while(表达式) 语句语句就是循环体：可以是单条语句，也可以是复合语句表达式被称为循环条件表达式：表达式的值为非0（真）时就执行循环体语句特点：先判断，在执行。 注意： 循环体如果是多个语句，应该用花括号括起来，作为复合语句的出现。 必须给i和sum赋初始值，否则值是随机的。 循环体中应有使循环趋向于结束的语句。 5.3 用do….while语句实现循环 语法结构 1234do 语句while(表达式);特点：先执行一次循环体，然后判断条件是否成立。条件成立，再执行循环体。 一般情况下，while和do/while处理同一问题时，若二者的循环体部分一样，name结果也一样。 5.4 用for语句实现循环 可以完全代替while语句，for语句更为灵活。 语法结构： for(表达式1;表达式2;表达式3) ​ 语句 3个边大师的主要作用： 表达式1：设置初始条件，只执行一次，可以为零个，一个或多个变量设置初值 表达式2：循环条件表达式，循环的判断。 表达式3：作为循环的调整，例如使循环变量增值，它是执行完循环体后才进行的 for语句的执行过程如下： 执行表达式1 执行表达式2，表达式值为真，则执行循环体，然后执行第3步，为假，则结束循环转到第5步。 执行表达式3. 执行第2步 结束循环 可以在for语句外设置表达式1 可以在for语句循环体内设置表达式3 不写表达式2,判断条件为真 即非0 注意: C99支持在 表达式1里进行变量定义赋值，C89支持赋值，不支持定义 表示式2只要不是值为非0任何表达式 就执行循环体 5.5 循环的嵌套 想想Java就行了 5.6 几种循环的比较 3种循环都可以用来处理同一问题，一般情况下他们可以相互代替。 while和do/while循环中，只在while后面括号内指定循环条件，为了能使循环能正常结束，循环体内包含驱使循环结束的语句。 for循环可以在表达式3中包含使循环趋于结束的操作，甚至可以将循环体语句放在表达式3中。因此for语句的功能更强。 while和do/while，循环变量初始化的操作应在while和do/while语句之前完成。 3种循环语句都可以用break跳出循环，continue语句结束本次循环 5.7 改变循环执行状态 5.7.1 用break语句提前终止循环 作用是使流程跳出循环体之外，接着执行循环体下面的语句。 5.7.2 用continue提前结束本次循环 作用：有时不希望终止整个循环的操作，而只希望提前结束本次循环，接着执行下次循环。 5.7.3 break和continue的区别 continue：结束本次循环 break：终止整个循环的执行 12345678910111213141516# include &lt;stdio.h&gt;int main ()&#123; int i,j; for(i=1;i&lt;5;i++) &#123; for(j=1;j&lt;=i*5;j++) &#123; if(j%i!=0) continue; printf(\"%d\\t\",j); &#125; printf(\"\\n\"); &#125; return 0;&#125; 5.8 循环程序举例 getchar（）函数：不会直接读取用户输入字符，用户输入的字符输入后，会存入到缓冲区。后续可以接着用getchar（）调用，直到缓冲区中没有字符。 说明： 当用户键入回车之后，getchar才开始从stdin流中每次读入一个字符，getchar函数的返回值是用户输入的第一个字符的ASCII码。 如出错返回-1，且将用户输入的字符回显到屏幕，如用户在按回车之前输入了不止一个字符，其他字符会保留在键盘缓存区中，等待后续getchar调用读取。 也就是说，后续的getchar调用不会等待用户按键，而直接读取缓冲区中的字符，直到缓冲区中的字符读完为后，才等待用户按键。 1234567891011121314151617181920212223# include &lt;stdio.h&gt;int main()&#123;/*转换字符串（字母）*/ char c; c=getchar(); while(c!='\\n') &#123; if((c&gt;='a'&amp;&amp;c&lt;='z')||(c&gt;='A'&amp;&amp;c&lt;='Z'))&#123; if((c&gt;='w'&amp;&amp;c&lt;='z')||(c&gt;='W'&amp;&amp;c&lt;='Z')) c-=22; else c+=4; &#125; printf(\"%c\",c); c=getchar();//从缓冲区中读取剩余的字符 &#125; printf(\"\\n\"); return 0;&#125;","categories":[],"tags":[{"name":"学习","slug":"学习","permalink":"http://www.nscblog.top/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"专升本","slug":"专升本","permalink":"http://www.nscblog.top/tags/%E4%B8%93%E5%8D%87%E6%9C%AC/"},{"name":"C语言","slug":"C语言","permalink":"http://www.nscblog.top/tags/C%E8%AF%AD%E8%A8%80/"}]},{"title":"选择结构程序设计","slug":"选择结构程序设计","date":"2020-05-14T12:41:49.000Z","updated":"2020-06-10T12:53:13.510Z","comments":true,"path":"2020/05/14/选择结构程序设计/","link":"","permalink":"http://www.nscblog.top/2020/05/14/%E9%80%89%E6%8B%A9%E7%BB%93%E6%9E%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/","excerpt":"选择结构程序设计 4.1 选择结构和判断条件 选择结构的关键：条件判断。 C语言选择语句： if语句 实现两个分支 switch语句，实现多分支的选择结构 1234567891011121314151617181920212223//使用if实现双分支选择结构# include &lt;stdio.h&gt;# include &lt;math.h&gt;//求方程实根 int main()&#123; double a,b,c,disc,x1,x2,p,q;//disc是判别式 b^2-4*a*c printf(\"请分别输入a,b,c的值\\n\"); scanf(\"%lf%lf%lf\",&amp;a,&amp;b,&amp;c); printf(\"%f\\t%f\\t%f\\t\",a,b,c); disc=pow(b,2)-4*a*c; //disc大于0时才有实根 if(disc&lt;0)&#123; printf(\"这个方程没有实根\\n\"); &#125; else&#123; q=sqrt(disc)/(2.0*a); p=-b/(2.0*a); x1=p+q; x2=p-q; printf(\"x1=%.2f\\t,x2=%.2f\",x1,x2); &#125; return 0;&#125;","text":"选择结构程序设计 4.1 选择结构和判断条件 选择结构的关键：条件判断。 C语言选择语句： if语句 实现两个分支 switch语句，实现多分支的选择结构 1234567891011121314151617181920212223//使用if实现双分支选择结构# include &lt;stdio.h&gt;# include &lt;math.h&gt;//求方程实根 int main()&#123; double a,b,c,disc,x1,x2,p,q;//disc是判别式 b^2-4*a*c printf(\"请分别输入a,b,c的值\\n\"); scanf(\"%lf%lf%lf\",&amp;a,&amp;b,&amp;c); printf(\"%f\\t%f\\t%f\\t\",a,b,c); disc=pow(b,2)-4*a*c; //disc大于0时才有实根 if(disc&lt;0)&#123; printf(\"这个方程没有实根\\n\"); &#125; else&#123; q=sqrt(disc)/(2.0*a); p=-b/(2.0*a); x1=p+q; x2=p-q; printf(\"x1=%.2f\\t,x2=%.2f\",x1,x2); &#125; return 0;&#125; 4.2 用if语句实现选择结构 4.2.1 用if语句处理选择结构举例 1234567891011121314151617181920//用if语句处理选择结构举例 # include &lt;stdio.h&gt;# include &lt;math.h&gt;//是两个值进行互换//关键是借助中间变量进行交换 int main()&#123; double a,b,temp; printf(\"请分别输入a,b的值\\n\"); scanf(\"%lf%lf\",&amp;a,&amp;b); //a大于b时进行交换 if(a&lt;b)&#123; &#125; else&#123; temp=a; a=b; b=temp; &#125; printf(\"%f\\t%f\",a,b); return 0;&#125; 4.2.2 if语句的一般形式 一般形式 ​ if（表达式）语句1 ​ [else 语句2] //这个部分可以有，也可以没有 常用三种形式 if (表达式) 语句1 没有else部分 if(表达式) ​ 语句1 else ​ 语句2 if(表达式1) 语句1 多层if语句 else if(表达式2) else if(表达式3) …. else 注意： 整个if语句可以卸载多行上。也可以卸载一行上 if(表达式){ 语句1 语句2 } 语句1 语句2属于内嵌语句，是if语句中的一部分。 if语句无论写在几行上，都是一个整体，属于同一个语句。 内嵌语句可以是简单语句，也可以是多种语句 表达式的值只能是逻辑值 4.3 关系运算符和关系表达式 4.3.1 关系运算符及其优先次序 运算符的优先级 4.3.2 关系表达式 在C的逻辑运算中，以“1”代表真，以“0”代表“假”。 例： a=3,b=2,c=1 特殊情况： d=a&gt;b 因为a&gt;b为真，因此关系表达式a&gt;b的值为1，所以赋值d后的值为1。 4.4 逻辑运算符和逻辑表达式 4.4.1 逻辑运算符及其优先次序 逻辑表达式：用逻辑运算符将关系表达式或其他逻辑量连接起来的式子就是逻辑表达式 &amp;&amp;：逻辑与：只要有量为假 表达式的值就为假 ||：逻辑或：只要有量为真 表达式的值就为真 ！：逻辑非 运算符的优先级： ！&gt;&amp;&amp;&gt;|| 从高到低排列 逻辑运算符中的“&amp;&amp;”和“||” 低于关系运算符，“!”高于算术运算符 4.4.2 逻辑表达式 逻辑表达式：用逻辑运算符将关系表达式或其他逻辑量连接起来的式子就是逻辑表达式 逻辑表达式的值应该是一个逻辑量“真”或者“假” 判断结果时：以数值 1 代表真，以数值 0 代表假 判断一个量时：以 0 代表假，以数值 非0 代表真 如： 设a的值等于4，则!a的值为0。因为a的值为非0，被认作是真，对它进行非运算，得“假”。“假”以0为代表。 注意：逻辑运算符两边的运算对象不但可以是0和1，或者是0和非0，也可以是字符型、浮点型、枚举型、或指针型的纯量型数据。 注意： 当a=1,b=2,c=3,d=4,m和n的原值为1是，由于“a&gt;b”的值为0，因此m=0，此时已经能判断整个表达式的值不可能为真。不必再进行”n=c&gt;d”的运算，因此n的值不是0，而仍保持原值1。 4.4.3 逻辑型变量 C99所增加的一种数据类型。语法：_Bool a; 在头文件stdbool.h中，将bool定义为_Bool的同义词，同时定义两个符号常量true和false true代表1 false代表0 例如： 123456789101112131415161718# include &lt;stdio.h&gt;# include &lt;stdbool.h&gt; int main()&#123; _Bool a = false; printf(\"--------------%d-----------------\\n\",a); bool b = true; printf(\"--------------%d-----------------\\n\",b); return 0;&#125; 运行结果：--------------0-------------------------------1-------------------------------------------------Process exited after 0.02229 seconds with return value 0请按任意键继续. . . 注意： 在使用bool之前，应该确定该编译系统是否能使用。 4.5 条件运算符的条件表达式 条件运算符： 逻辑表达式 ? 值为1时 执行 : 值为0时执行; 条件运算符是C语言中的唯一的三目运算符 4.6 选择结构的嵌套 在if语句中又包含一个或多个if语句称为if语句的嵌套 表现形式： 123456if() if() 语句1 else 语句2else if() 语句3 else 语句4 else 会就近匹配 if 4.7 用switch语句实现多分支选择结构 语法： switch(表达式) { case 常量1：语句1；break； case 常量2：语句2；break； ……. default: 语句n; } 说明： 表达式的值类型应为整数类型（包括字符型）。 花括号内是一个复合语句，case 用来标记一个位置 可以没有default标号，没有与switch表达式相匹配的case常量，则不执行任何语句，流程转到switch语句的下一个语句。 标号的出现次序不影响执行结果 case常量必须互不相同， case标号只起标记作用，根据switch表达式的值找到匹配的入口标号。 case子句中虽然包含了一个以上执行语句，但可以不必用花括号括起来，会自动顺序执行此case标号后的所有语句。 多个case标号可以共用一组执行语句。 4.8 选择结构程序综合举例 例：判断一年是否是闰年 1234567891011121314151617181920212223242526# include &lt;stdio.h&gt;# include &lt;math.h&gt;# include &lt;stdbool.h&gt;/*判断一年是否是闰年 */int main()&#123; int year; _Bool leap; printf(\"请输入要判断的年份\\n\"); scanf(\"%d\",&amp;year); if(year%4==0&amp;&amp;year%100!=0||year%400==0) leap=1; else leap=0; //将leap作为判断输入年份是否是闰年 //leap=1 为闰年 //leap=0 不是闰年 if(leap) printf(\"%d是闰年\",year); else printf(\"%d不是闰年\",year); return 0;&#125; 例：求方程的根 123456789101112131415161718192021222324252627282930313233343536# include &lt;stdio.h&gt;# include &lt;math.h&gt;# include &lt;stdbool.h&gt;/* 求ax^2+bx+c=0的根 */int main()&#123; double a,b,c,desc,p,q,x1,x2; //desc=b^2-4ac; printf(\"请分别输入a,b,c的值\\n\"); scanf(\"%lf%lf%lf\",&amp;a,&amp;b,&amp;c); if(!a) //a=0时，二次方程不存在 printf(\"这不是二次方程\"); else &#123; desc=pow(b,2)-4*a*c; if(desc==0) &#123; printf(\"这个方程有两个相同的实根\"); x1=-b/(2.0*a); printf(\"x1=%d,x2=%d\",x1,x1); &#125; else if(desc&lt;0) &#123; printf(\"这个方程没有实根\"); &#125; else &#123; p=sqrt(desc)/(2.0*a); q=-b/(2.0*a); x1=p+q; x2=q-p; printf(\"x1=%d\\tx2=%d\",x1,x2); &#125; &#125; return 0;&#125; 例 12345678910111213141516171819202122232425262728293031323334353637383940414243# include &lt;stdio.h&gt;# include &lt;math.h&gt;# include &lt;stdbool.h&gt;/* 计算运输费用 */int main()&#123; int c,s;//c表示250的倍数，s表示里程 printf(\"请输入相应的里程数：\\n\"); float d,p,f,w;//d 表示折扣 便宜d%，p表示价格，f表示总价,w表示重量 scanf(\"%d\",&amp;s); printf(\"请输入相应的单价和重量：\\n\"); scanf(\"%f%f\",&amp;p,&amp;w); /* 计算里程倍数 */ if (s&gt;3000) c=12; else c=s/250; //统计折扣 if(c&gt;=12)&#123; d=15; &#125; else if (8&lt;=c&amp;&amp;c&lt;=11)&#123; d=10; &#125; else if (c&gt;=4&amp;&amp;c&lt;=7)&#123; d=8; &#125; else if(c&gt;=2&amp;&amp;c&gt;=3)&#123; d=5; &#125; else if(c&gt;0&amp;&amp;c&lt;=1)&#123; d=2; &#125; else&#123; printf(\"没有优惠\\n\"); d=0; &#125; printf(\"优惠%f\\n\",d/100); //计算运费 f=p*w*s*(1-d/100); printf(\"运输费用是%f\\n\",f); return 0;&#125;","categories":[],"tags":[{"name":"学习","slug":"学习","permalink":"http://www.nscblog.top/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"专升本","slug":"专升本","permalink":"http://www.nscblog.top/tags/%E4%B8%93%E5%8D%87%E6%9C%AC/"},{"name":"C语言","slug":"C语言","permalink":"http://www.nscblog.top/tags/C%E8%AF%AD%E8%A8%80/"}]},{"title":"hexo+GitHub博客搭建","slug":"hexo-GitHub博客搭建","date":"2020-05-01T08:52:43.000Z","updated":"2020-06-01T09:11:49.326Z","comments":true,"path":"2020/05/01/hexo-GitHub博客搭建/","link":"","permalink":"http://www.nscblog.top/2020/05/01/hexo-GitHub%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/","excerpt":"hexo+GitHub博客搭建 引言 我花了一些时间搭建属于自己的博客，曾经也弄过一些博客之类的，接触hexo之后，相对来说,hexo简单易用，灵活高效。 hexo+GitHub进行搭建相对自己购买服务器更为划算。花费的精力也比使用服务器要少很多。这样我们就可以更专注写博客。","text":"hexo+GitHub博客搭建 引言 我花了一些时间搭建属于自己的博客，曾经也弄过一些博客之类的，接触hexo之后，相对来说,hexo简单易用，灵活高效。 hexo+GitHub进行搭建相对自己购买服务器更为划算。花费的精力也比使用服务器要少很多。这样我们就可以更专注写博客。 环境搭建 首先我们要将博客托管于GitHub所以我们先安装Git，使用Git进行代码的上传于维护。 Git安装 从Git官网上下载你计算机系统所对应的Git安装包 无脑下一步，进行安装 安装完成之后Win+R 输入cmd回车 输入 1git --version 出现版本号，代表环境变量配置成功。没有配置成功的话 1234找到Git的安装路径将安装路径下的bin文件夹的路径添加到path变量中注意：bin文件夹存放是Git的一些二进制可执行命令。 Git的一些基本操作和使用，我推荐极客学院的Git教程，写的很清楚，跟着学基本使用不成问题。 node.js安装 从nodejs官网上下载你计算机系统所对应的nodejs安装包，我们直接使用长期支持办就行。不推荐使用最新版，否则在后续过程会出现百度都没有的问题。如： TypeError [ERR_INVALID_ARG_TYPE]: The “mode” argument must be integer. 无脑下一步，直接完事。 再次进入cmd 执行以下命令 12node -v #查看nodejs的版本npm -v #这我也不知道是啥，查看有没有相关工具 安装Git和nodejs之后，我们直接使用git bash来敲命令行 hexo安装 先创建一个空文件夹blog，用于存放hexo的环境与博客文章，在blog文件内进行右单击后选择git bash here 输入命令 1npm install -g hexo-cli 老规矩，使用hexo -v 查看是否安装成功，顺便查看版本号 接下来初始化hexo 1hexo init 初始化完成后会有以下文件结构： node_modules：依赖包 即hexo所需的环境依赖 public：生成的页面的存放位置 scaffolds：生成文章的一些模板 source：用来存放你的文章 themes：hexo主题样式 .gitignore：上传到git时所要忽略的东西 _config.yml：全局的配置文件 输入命令 12hexo g #生成博客视图资源hexo s #启动后台服务器 会有http://localhost:4000 在浏览器中输入：http://localhost:4000 进行测试查看 使用Ctrl+C将服务器关闭 创建GitHub个人仓库 首先创建一个GitHub账号，记得用户名 创建一个仓库（repository）仓库名是 用户名.github.io 如我的仓库名就是 t-diana.github.io 将SSH添加到GitHub 记录本台机器一些信息 1234#这里的yourname输入你的GitHub用户名git config --global user.name &quot;yourname&quot;#这里youremail输入你的GitHub的邮箱git config --global user.email &quot;youremail&quot; 生成SSH公钥 1ssh-keygen -t rsa -C \"youremail\" 可以在用户主目录里找到.ssh目录，里面有 id_rsa 和 id_rsa.pub 两个文件，这两个就是 SSH Key 的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。 GitHub添加SSH 登录GitHub 点击右上角头像，选择setting 选择SSH and GPG keys 点击 New SSH key 将id_rsa.pub里的内容全部复制到key中，取个title 点击Add SSH key 在git bash 中查看是否添加成功 1ssh -T git@github.com #直接复制，不用修改 将hexo部署到GitHub 对全局配置文件_config.yml(而不是themes下的 _config.yml)进行修改 12345deploy: type: git repo: https://github.com/YourgithubName/YourgithubName.github.io.git branch: master#YourgithubName 就是自己的GitHub用户名 然后需要先安装deploy-git，才能用命令将博客视图资源部署到GitHub上 1npm install hexo-deployer-git --save #安装deploy-git的命令 上传操作相关命令，每次写完文章后，执行相关的命令 123hexo clean #清除之前生成的博客视图资源hexo generate 或是 hexo g #生成静态文章hexo deploy 或是 hexo d #将资源上传到GitHub上 注意： 进行deploy时会需要输入username和password 至此，博客基本搭建完成。如果需要进行其他修改的话。 大家可以查看这篇博客，这位博主写得非常细致。","categories":[],"tags":[{"name":"学习","slug":"学习","permalink":"http://www.nscblog.top/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"错误记录","slug":"错误记录","permalink":"http://www.nscblog.top/tags/%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/"}]},{"title":"学习方法论","slug":"学习方法论","date":"2020-05-01T08:26:36.000Z","updated":"2020-05-05T01:22:35.847Z","comments":true,"path":"2020/05/01/学习方法论/","link":"","permalink":"http://www.nscblog.top/2020/05/01/%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%E8%AE%BA/","excerpt":"关于学习 世界观： ​ 不学习就不会产生进步，将会愚昧无知，自甘堕落。学习就是体验痛苦，重复同样的事物，却没有任何意思。我不喜欢学习，也不喜欢学习的成果，我想要的永远没有得到过。我只是在获取在这个世界的生存方式。","text":"关于学习 世界观： ​ 不学习就不会产生进步，将会愚昧无知，自甘堕落。学习就是体验痛苦，重复同样的事物，却没有任何意思。我不喜欢学习，也不喜欢学习的成果，我想要的永远没有得到过。我只是在获取在这个世界的生存方式。 方法论： chapter1 拖延症 学习新事物的记忆区域与痛觉的区域再相同的地方（大脑），因而当你在学习新事物的，会加大堆脑部的压力。 要学会主动去做，天赋与才能的开始 (这是一种态度，也是很重要的思想) chapter2 记住学习的重要的东西，而不是重复学习 消耗时间回忆，不要持续学习新事物 ​ 大脑记忆新事物的重要性 弱势就是学习的需求 睡眠很重要，理由如下： ​ 可以缓解压力 ​ 将神经元上突触的毒素清除，创建更多的突触 将新事物的特点与旧事物进行连接 用于更好的学习新事物。 chapter3 即使有别人帮助你，还得靠自己 左脑(专注模式，逻辑模式)：记忆新事物，前提是注意力不被分散 右脑(散发模式)：大脑游走，表达事物。 学习最大的部分解决问题 chapter4 变得吃力，却同时变得更加容易 学习新事物 难点 找不到与之有关的联系 学习的表面:只知道名字和类别 学习的主要:最让你感觉到最真实的那部分。 方向:有大体方向，不要卡在细节 ​ 当细节过后，补全细节 chapter5 你还得做大量的研究 错误是学习的一部分 由创意的人存在的问题：太过相信直觉认为正确的事情。 上手不等同于掌握 这样只有表面印在了我的大脑中 要有练习的时间 学习一件事新事物，是在不同的事物之间来回，而不是同一事物间来回。这样可以存在空间复习出处理和学习事物。 过一段时间后，用练习和直觉来确实的学习事物。 chapter6 所有东西都与过程有关 拖延是正常的，学习新事物没有那么愉快。在学习新事物很难起手。 学习新事物的同时等同于在吃苦。 没有天赋与才能，天赋与才能的起点:I AM WILLING TO DO IT(我愿意去做)，通过天赋与才能获取到的事物只是附属品。","categories":[],"tags":[{"name":"学习","slug":"学习","permalink":"http://www.nscblog.top/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"方法论","slug":"方法论","permalink":"http://www.nscblog.top/tags/%E6%96%B9%E6%B3%95%E8%AE%BA/"}]},{"title":"最简单的C程序设计——顺序程序设计","slug":"最简单的C程序设计——顺序程序设计","date":"2020-03-27T12:41:13.000Z","updated":"2020-06-10T12:50:29.202Z","comments":true,"path":"2020/03/27/最简单的C程序设计——顺序程序设计/","link":"","permalink":"http://www.nscblog.top/2020/03/27/%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E2%80%94%E2%80%94%E9%A1%BA%E5%BA%8F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/","excerpt":"3.1 顺序程序设计举例 略,自己看资料理解","text":"3.1 顺序程序设计举例 略,自己看资料理解 3.2 数据的表现形式及其运算 程序中最基本的成分:数据成分,运算成分,控制成分,传输成分 3.2.1 常量和变量 在计算机高级语言中,数据有两种表现形式:常量和变量 1. 常量 概念:程序运行过程中不能被改变的量 常量类型: 整形常量 实型常量:1&gt;十进制小数形式;2&gt;指数形式 字符常量:普通字符常量(用单撇号括起来的);转义字符(以\\开头的字符序列,如:\\n) ASCII码的字符表示都可以通过该字符的八进制的进行转义 字符串常量:用双撇号将若干个字符括起来 符号常量 概念:使用# define指令,指定一个符号名称代表一个常量 如: #define PI 3.1416 要求:1&gt;含义清楚,即见名知义;2&gt;多处使用到同一个常量是,能做到”一改全改”. 注意:要区分符号常量和变量 ​ 符号常量不占内存只是一个临时符号,预编译后这个符号就不存在了,所以不能对符号常量赋新值 2. 变量 变量代表一个有名字的具有特定属性的一个存储单元,它用来存放数据(变量的值) 变量先声明,后使用. 变量名实际上是一个以名字为代表的一个存储地址.在对程序编译连接时由编译系统给每一个变量名分配对应的内存地址.从变量中取值,实际上是通过变量名找到相应的内存地址,从该存储单元中读取值. 3. 常变量 由const进行修饰 如:const float pi =3.1415926 符号常量和常变量的异同 常变量:具有变量的基本属性:有类型,占存储单元.不能改变值,可以在程序中被引用. ​ 具有符号常量的优点,使用方便 符号常量:没有占存储单元 ​ 在预编译时进行字符串替换 4. 标识符 只能由字母,数字,下划线组成,且第一个字符必须为字母或下划线 严格区分大小写 3.2.2 数据类型 在数学中,数值是抽象的 在计算机,数据是存放在存储单元中的,它是具体存在的,存放数据范围是有限的 单精度是小数点后6位 基本类型和枚举类型变量的值都是数值.统称算术类型 算术类型和指针类型统称为纯量类型(标量类型):变量值是以数字表示的,枚举类型是程序中用户定义的整数类型. 枚举类型是程序中用户定义的整数内容(枚举类型的值只能是整数类型) 数组类型和结构体类型统称为组合类型,共用体类型不属于组合类型因为在同一时间内只能有一个成员具有值. 函数类型:用于定义函数,描述函数的接口,包括(函数返回值的数据类型和参数的类型) 3.2.3 整形数据 1.基本整形(int型) 编译系统分配给int型数据2个字节或4个字节(由具体的C编译系统决定) Visual C++为每个整形分配四个字节 存储单元的存放方式:用整数的补码进行存放 正整数的补码就是原码 负数的补码是正整数的原码按位取反,进行加一 十进制转二进制: 2. 短整型 Visual C++ 分配2个字节 3. 长整形 Visual C++ 分配4个字节 注意: 只有整形包括字符型数据可以加signed或unsigned,实型数据不能加 无符号整形数据用”%u”格式进行输出,%u表示用无符号十进制数的格式输出 3.2.4 字符型数据 1. 字符与字符代码 在程序中,只能使用系统字符集中的字符,目前大多数采用ASCII字符集. 2. 字符变量 关键字:char 如: char a = ‘b’ 这个声明变量并且赋值的意思是将字符 b 对应的ASCII码赋值给变量名为a这个字符变量 输出时可以选择十进制输出,或选择字符形式输出 “%d”:十进制输出 “%c”:字符形式输出 Q:字符类型也属于整形,是否也可以使用signed和unsigned修饰符? 可以 第一位(8位二进制表示的数),表示符号位:数据范围就是:0-127(相当于使用了signed进行修饰) 第一位不表示符号位,数据表示可以从0-255(使用了unsigned进行修饰) 3.2.5 浮点型数据 在C语言中实数以指数形式存储，如图 比如：3.1416 可以表示为3.14159x10^0 0.314159x10^1 移动小数点位置的同时改变指数的值，就可以保证它的值不会变 小数部分占的位数越多，表示精度大 指数部分占的位数越多，表示范围越大 浮点数类型有：float double 注意：C编译系统把浮点型常量按双精度处理。 3.2.6 怎样确定常量的类型 整形常量：不带小数点的数值是整形常量。 浮点型常量：凡是以小数形式出现的实数。 区分类型和变量： 类型：是变量的一个属性，代表的是一类型的数据。比如： 大学生 变量：占用存储单元，是具体存在的实体。如 大学生 我 大学生是抽象的 而我是具体的 3.2.7 运算符和表达式 1.基本的算术运算符 2.自增、自减运算符 注意：自增、自减运算符只能用于变量，不能用于常量或表达式 3.算术表达式和运算符的优先级与结合性 算术运算符中的数如果只能float，那将数值转为float，进行计算，如果有double 就转为double进行计算，float和double都有，就转为double进行计算 3.3 C语句 一个函数包含声明部分和执行部分，执行部分由C语句组成 C语句分类： 控制语句 条件语句 循环语句 continue 结束本次循环语句 break 终止执行switch或循环语句 switch 多分支选择语句 return 函数返回语句 goto 转向语句，在结构化过程中基本不适用goto语句 函数调用语句: 由一个函数调用和一个分号组成 如 printf(); 表达式语句 如a=3; 空语句 ； 复合语句 也称语句块（代码块）形如：{ a=3;b=4;} 注意：复合语句中最后的分号不能忽略不写 3.3.2 最基本的语句-赋值语句 赋值运算符 复合的赋值运算符 赋值表达式 赋值过程中的类型转换 浮点类型-&gt;整形 小数部分舍弃 整形-&gt;浮点类型 小数部分补零 3.4 数据的输入输出 3.4.2 有关数据输入输出的概念 输入输出是针对计算机而言的 C语言本身不提供输入输出语句，输入输出操作由C标准函数库实现的。 C提供的标准函数以库的形式在C的编译系统中提供，不是C语言文本的组成部分。 在使用系统库函数是，要在文件的开头用预处理命令#include 把有关头文件放在本程序中 #include&lt;stdio.h&gt; stdio.h是包含了标准的I/O库有关的变量定义和宏定义以及对函数的声明 3.4.3 使用printf函数输出数据 printf函数的一般格式： printf(格式控制，输出列表)； printf(“%d”,c); 格式字符 说明 %d 输出一个有符号的十进制 %c 输出一个字符 %s 输出一个字符串 %f 输出浮点数 %7.2f代表数据宽度为7，其中包括2位小数 %-25.3f 代表输出数据向左对齐（当位数不足25时）%25.3f 输出数据左边以空格填充（当位数不足25位时） %e 以指数形式输出实数 VisualC++小数位默认占6位 3.4.4 用scanf函数输入数据 scanf函数的一般形式（语法） scanf(格式控制，地址表列); 如scanf(“%d%f”,&amp;a,&amp;b); 注意 格式控制后面应当是变量地址，而不是变量名 格式控制字符串中除了格式声明以外还有其他字符，则在输入数据时在对应位置输入与这些字符相同的字符。 如：scanf(“a=%d,b=%c”,&amp;a,&amp;b); 则输入a=10,b=’c’ 在使用“%c”格式声明时，空格字符和‘’转义字符 ‘’都作为有效字符。 在输入数值数据时，如输入空格、回车、Tab键，或遇非法字符，认为该数据结束。 3.4.5 字符数据的输入输出 用putchar()函数输出一个字符 语法：putchar(c); 输出变量c 用getchar()函数输入一个字符 语法：getchar() 注：此函数没有参数","categories":[],"tags":[{"name":"学习","slug":"学习","permalink":"http://www.nscblog.top/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"专升本","slug":"专升本","permalink":"http://www.nscblog.top/tags/%E4%B8%93%E5%8D%87%E6%9C%AC/"},{"name":"C语言","slug":"C语言","permalink":"http://www.nscblog.top/tags/C%E8%AF%AD%E8%A8%80/"}]},{"title":"算法——程序的灵魂","slug":"算法——程序的灵魂","date":"2020-03-25T12:40:23.000Z","updated":"2020-06-10T12:50:58.502Z","comments":true,"path":"2020/03/25/算法——程序的灵魂/","link":"","permalink":"http://www.nscblog.top/2020/03/25/%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%81%B5%E9%AD%82/","excerpt":"引言 程序包含两个方面的信息: ​ 1.对数据的描述: 就是数据结构:程序中要指定用到哪些数据以及这些数据的类型和数据的组织形式. 需要的数据 数据的类型 数据的存储的形式 如:key-value ​ 2.对操作的描述:即要求计算机进行操作的步骤,也就是算法 数据是操作对象 操作的目的是对数据进行加工处理来得到想要的结果 程序设计人员应具备的知识: 算法 数据结构 程序设计方法 语言工具 ​ 算法+数据结构=程序 算法是灵魂 语言是工具 数据结构是加工对象 编程需要采用合适的方法","text":"引言 程序包含两个方面的信息: ​ 1.对数据的描述: 就是数据结构:程序中要指定用到哪些数据以及这些数据的类型和数据的组织形式. 需要的数据 数据的类型 数据的存储的形式 如:key-value ​ 2.对操作的描述:即要求计算机进行操作的步骤,也就是算法 数据是操作对象 操作的目的是对数据进行加工处理来得到想要的结果 程序设计人员应具备的知识: 算法 数据结构 程序设计方法 语言工具 ​ 算法+数据结构=程序 算法是灵魂 语言是工具 数据结构是加工对象 编程需要采用合适的方法 2.1 什么是算法 算法(广义): 解决一个问题采取的方法和步骤 计算机语言算法 :程序 2.2 简单的算法举例 略 2.3 算法的特性 有效算法的特点: 123456789有穷性:一个算法包含有限的操作步骤,而不能是无限的确定性:算法每个步骤都是确定的,不会产生歧义零个或多个输入(形式参数表):输入是指执行算法时需要从外界取得必要的信息.有一个或多个输出:算法的目的是为了求解.有效性：算法中每步能有效的执行 2.4 表示一个算法 2.4.1 用自然语言表示 用人们日常使用语言表示一个算法 2.4.2 用流程图表示 流程图用一些图框表示各种操作 2.4.3 三种基本结构和改进的流程图 传统流程图的弊端 没有严格规范,不易阅读和理解算法逻辑 算法可靠性弱,可维护性低 三种基本结构 用三种基本结构作为一个良好算法的节本单元 1&gt;顺序结构:对简单的一种基本结构 2&gt;选择结构: 选择结构又称选取结构或分支结构 判定给定的条件是否成立,从而选择执行A或B 3&gt;循环结构:又称重复结构,反复执行某一部分的操作 三种基本结构共同点: 1.只有一个入口 2.只有一个出口 3.结构内每一部分都有机会被执行到. 4.结构内不存在死循环(体现了算法的有穷性,步骤是有限的,如:调用一个循环时,条件不会是一个无限循环的条件) 2.4.4 用N-S流程图表示算法 在基本结构上进行修改,去掉带箭头的流程线,算法全部写在一个矩形框中,框中包含其他从属关系. 简单来说,由一些基本的框组成一个大框. 如 2.4.5 用伪代码表示算法 伪代码写算法并无固定的，严格的语法规则，只要把意思表达清楚，便于书写和阅读即可，书写的格式要写成清晰易读的形式。 2.4.6 用计算机语言表示算法 完成一项工作，包括设计算法和实现算法两个部分 如：菜谱是一个算法，厨师炒菜就是在实现这个算法 对于计算机来说，只能用计算机语言来实现算法，流程图和伪代码是无法识别的。 注意：对于C语言来说，写出了C程序，仍然只是描述了算法，并未实现算法，只有运行程序才是实现了算法。 2.5 结构化程序设计方法 结构化程序设计的目的：程序设计风格和程序结构的规范化。 结构化程序设计方法的基本思路： 将复杂问题的求解过程分段进行，每个阶段处理的问题到控制在人们理解和处理的范围内。 主要采取的设计方法： 1&gt;自定向下 2&gt;逐步细化 3&gt;模块化设计 4&gt;结构化编码","categories":[],"tags":[{"name":"学习","slug":"学习","permalink":"http://www.nscblog.top/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"专升本","slug":"专升本","permalink":"http://www.nscblog.top/tags/%E4%B8%93%E5%8D%87%E6%9C%AC/"},{"name":"C语言","slug":"C语言","permalink":"http://www.nscblog.top/tags/C%E8%AF%AD%E8%A8%80/"}]},{"title":"程序设计和C语言","slug":"程序设计和C语言","date":"2020-03-20T12:47:52.000Z","updated":"2020-06-10T12:45:20.473Z","comments":true,"path":"2020/03/20/程序设计和C语言/","link":"","permalink":"http://www.nscblog.top/2020/03/20/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%92%8CC%E8%AF%AD%E8%A8%80/","excerpt":"1.1 什么是计算机程序 程序: 一组计算机能识别和执行的指令 每条指令使计算机执行特定的操作,一个特定的指令序列(指令集合),用来完成一定的功能. 计算机的本质是程序的机器","text":"1.1 什么是计算机程序 程序: 一组计算机能识别和执行的指令 每条指令使计算机执行特定的操作,一个特定的指令序列(指令集合),用来完成一定的功能. 计算机的本质是程序的机器 1.2 什么是计算机语言 个人简单理解:人与计算机交互的工具 计算机与人都能识别的语言这就是计算机语言 计算机语言的发展阶段: 机器语言 计算机是基于二进制工作的 机器指令:计算机能够识别和接受的二进制代码. 机器语言:机器指令的集合. 缺点:不容易使用,难以修改程序代码 符号语言(汇编语言) 符号语言:英文数字表示一个指令 例如:ADD表示 加 由于计算机不能直接识别 执行符号语言,所以要通过汇编程序的软件将符号语言的指令转换为机器指令. 转换的过程称为”代真”或”汇编”,因而符号语言又叫汇编语言或符号汇编 优点: 相对于机器语言方便使用 缺点: 程序可移植性差,机器依赖性强,如:机器A的上的程序无法在机器B上使用 机器语言和汇编语言是完全依赖于具体机器特性的,是面向机器的语言,相对于其他语言来说更”贴近”计算机,背称为计算机低级语言. 高级语言 不依赖于具体机器,它与具体计算机距离较远. 世界第一个计算机高级语言 FORTRAN语言(20世纪50年代) 高级语言需要通过编译器程序软件转换为机器指令的程序 高级语言的一个语句一般对应多条机器指令 优点: 高级语言数据结构丰富 不依赖于具体机器,它与具体计算机距离较远.(可移植性强) 简单易学,容易推广 高级语言的出现是计算机发展史上”惊人的成就” 高级语言的发展阶段 非结构化语言 符合语法要求,没有严格规范要求 程序难以维护和难以阅读 早期的BASIC FORTRAN和ALGOL都属于非结构化语言 结构化语言 为了解决非结构化语言的缺点(程序难以维护和阅读),提出结构化程序设计方法 程序由良好的基本结构(顺序结构 分支结构 循环结构)构成 程序中的流程不得随意跳转 程序结构清晰,易于编写 阅读和维护 QBASIC FORTRAN77和C语言都是结构化语言 语言特点:支持结构化程序设计方法 缺点: ​ 在编写程序时需要制定具体每个过程的细节 —-&gt; 规模小的程序 还可以 规模较大的程序显得力不从心(面向过程编程) 面向对象语言 对象由数据以及对数据进行的操作构成的 用于处理规模较大的程序 1.3 C语言的发展及其特点 C语言是国际广泛流行的计算机高级语言。 c语言的祖先是BCPL语言 c语言的设计最初是为了Unix提供一种工作语言 C语言的特点: 1.语言简洁 紧凑,使用方便灵活 2.运算符丰富 3.数据类型丰富 4.具有结构化的控制语句 5.语法灵活,程序设计自由度大 6.C语言允许直接访问物理地址 7.C语言程序可移植性好 8.代码质量高,程序执行效率高 C语言原来是专门为系统软件而设计的 1.4 最简单的C语言程序 1.4.1 最简单的C语言程举例 12345678910111213141516171819202122#include&lt;stdio.h&gt;void main()&#123; int max(int x, int y);//调用max函数的声明 int a,b,c;//声明变量a b c /* &amp;: 地址符 &amp;a:a变量的地址 */ scanf(\"%d,%d\",&amp;a,&amp;b);//scanf是一个输入函数 输入a和b的值 c = max(a,b);//调用max函数 将得到的值复制给C printf(\"max=%d\\n\",c);//输出C的值 &#125;int max(int x, int y)&#123; if(x&gt;y)&#123; return(x); &#125;else&#123; return(y); &#125;&#125; 1.4.2 c语言程序的结构 c语言程序的结构: 1.一个程序由一个或多个源程序文件组成。 1234567891011- 规模较小的程序，往往只包括一个源程序文件(一个源文件中只有一个main函数)。一个源程序文件中可以包括3个部分: 1. 预处理指令 如:#include&lt;stdio.h&gt; #define C编译系统在对源程序进行\"翻译\"(转换为二进制)以前, 先由一个\"预处理器\"对指令进行预处理:将头文件的内容读取,放在#include后面 编译程序对源程序进行编译得到目标程序（机器指令） 2. 全局声明(在函数之外进行的数据声明) 相当于Java中成员属性 作用范围:整个源程序文件 3. 函数定义 每个函数用来实现一定的功能。调用这些函数时，会完成函数定义中指定的功能。 2.函数是C程序的主要组成部分 123456789函数是C程序的基本单位，在设计良好的程序中，每个函数都用来实现一个或几个特地当的功能。编写C程序的主要工作就是编写一个个函数。C程序有且仅有一个main函数，有一个或多个函数组成当程序规模较大时，为了方便编译 调试和管理，一个程序可以包括若干个源程序文件 一个源程序文件就是一个程序模块编译时，对个源文件程序进行编译得到相应的目标程序，将目标程序连接成为一个统一的二进制可执行程序程序中调用的函数可以是自定函数，可以是库函数 3.一个函数包括两个部分 int max (int x) {} ​ 函数首部 int max (int x) 函数类型 函数名 函数参数类型 函数参数名 ​ 函数体:{}(离函数首部最近的) ​ 声明部分: ​ 在调用函数中定义变量 ​ 对被调用函数进行声明 ​ 执行部分: ​ {}中的语句,指定在函数中进行的操作 也可以什么都不做即一个空函数 4.程序总是从main函数开始执行的 5.程序中对计算机的操作是由函数中的C语句完成的。 6.在每个数据声明语句的最后必须有一个分号 7.C语言本身不提供输入输出语句 ​ 输入输出的操作是由库函数来完成的 8.程序应当包含注释 ​ 增加必要的注释，提高程序的可读性。 1.5 运行C程序的步骤与方法 1.上级输入和编辑源程序 2.对源程序进行编译 1234561.先对程序中的预处理指令进行编译预处理2.在对完整的源程序进行编译编译的作用：首先是检查源程序中是否有语法错误没有语法错误之后，再编译时，自动包括了预编译和正式编译连个阶段，用户不用发出两次指令 3.进行连接处理 编译后得到的目标模块连接装配起来,再与函数库连接成一个整体,生成一个课供计算机执行的目标程序,称为 可执行程序 连接工作由”连接编辑程序”的软件来实现 4.运行可执行程序 1.6 程序设计的任务 程序设计是指从确定任务到得到结果,写出文档的全过程 一般经历以下几个工作阶段: 1.问题分析 ​ 研究给定条件 分析最终目标,找出解题规律,选择合适的解题方法 2.设计算法 ​ 设计出解题的方法和具体步骤 3.编写程序 ​ 根据得出的算法,用高级语言编写出源程序 4.对源程序进行编辑 编译和连接,得到执行程序 5.运行程序,分析结果 ​ 对程序进行调试,发现和排除程序中故障的工程 ​ 测试:设计多组测试数据,检查不同数据的运行情况,尽量找出程序中存在的漏洞,并修改程序,使程序能够适应各种情况. 6.编写程序文档 提供程序说明书内容应该包括 程序名称 程序功能 运行环境 程序安装和启动,需要输入的数据,以及使用注意事项 软件是计算机程序和程序文档的总称","categories":[],"tags":[{"name":"学习","slug":"学习","permalink":"http://www.nscblog.top/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"专升本","slug":"专升本","permalink":"http://www.nscblog.top/tags/%E4%B8%93%E5%8D%87%E6%9C%AC/"},{"name":"C语言","slug":"C语言","permalink":"http://www.nscblog.top/tags/C%E8%AF%AD%E8%A8%80/"}]}],"categories":[],"tags":[{"name":"学习","slug":"学习","permalink":"http://www.nscblog.top/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"专升本","slug":"专升本","permalink":"http://www.nscblog.top/tags/%E4%B8%93%E5%8D%87%E6%9C%AC/"},{"name":"C语言","slug":"C语言","permalink":"http://www.nscblog.top/tags/C%E8%AF%AD%E8%A8%80/"},{"name":"错误记录","slug":"错误记录","permalink":"http://www.nscblog.top/tags/%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/"},{"name":"方法论","slug":"方法论","permalink":"http://www.nscblog.top/tags/%E6%96%B9%E6%B3%95%E8%AE%BA/"}]}